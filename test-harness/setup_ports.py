#!/usr/bin/env python3
"""
Port Setup Script - Initialize and configure dynamic port assignments
"""

import os
import sys
import subprocess
from config.port_manager import port_manager, assign_port, get_port, export_env_vars

def initialize_ports():
    """Initialize port assignments for all services"""
    print("ðŸšª Initializing port assignments...")
    
    # Define services and their purposes
    services = [
        ("http-server", "Main HTTP Server"),
        ("postgres", "PostgreSQL Database"),
        ("mongo", "MongoDB Database"),
        ("redis", "Redis Cache (future)"),
        ("elasticsearch", "Elasticsearch (future)"),
        ("grafana", "Grafana Dashboard (future)"),
        ("prometheus", "Prometheus Metrics (future)"),
    ]
    
    # Assign ports for each service
    for service_name, purpose in services:
        port = assign_port(service_name, purpose)
        print(f"  ðŸ”¹ {service_name:<15} â†’ Port {port:<5} ({purpose})")
    
    port_manager.print_summary()
    
    return port_manager.get_service_ports()

def generate_env_file():
    """Generate .env file with port assignments"""
    env_vars = export_env_vars()
    
    env_content = "# Auto-generated port assignments\n"
    env_content += "# Generated by setup_ports.py\n\n"
    
    # Add base port configuration
    env_content += f"BASE_PORT={port_manager.base_port}\n"
    env_content += f"NEXT_PORT={port_manager.get_next_port()}\n\n"
    
    # Add service-specific port assignments
    env_content += "# Service Port Assignments\n"
    for var_name, value in env_vars.items():
        if var_name not in ["BASE_PORT", "NEXT_PORT"]:
            env_content += f"{var_name}={value}\n"
    
    # Add database configuration
    env_content += "\n# Database Configuration\n"
    env_content += "POSTGRES_HOST=localhost\n"
    env_content += "POSTGRES_DB=testdb\n"
    env_content += "POSTGRES_USER=user\n"
    env_content += "POSTGRES_PASSWORD=password\n"
    env_content += "MONGO_HOST=localhost\n"
    env_content += "MONGO_DB=testdb\n"
    env_content += "SQLITE_PATH=/tmp/test.db\n"
    
    # Add server configuration
    env_content += "\n# Server Configuration\n"
    env_content += "SERVER_HOST=localhost\n"
    env_content += "SERVER_PROTOCOL=http\n"
    env_content += "WS_PROTOCOL=ws\n"
    
    # Add test configuration
    env_content += "\n# Test Configuration\n"
    env_content += "REQUEST_TIMEOUT=30\n"
    env_content += "WEBSOCKET_TIMEOUT=30\n"
    env_content += "TEST_DATA_DIR=test-data\n"
    
    # Write to .env file
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("âœ… Generated .env file with port assignments")
    return '.env'

def update_compose_env_file():
    """Update docker-compose environment file"""
    env_vars = export_env_vars()
    
    # Create compose-specific env file
    compose_env_content = "# Docker Compose Environment Variables\n"
    compose_env_content += "# Generated by setup_ports.py\n\n"
    
    # Map service names to compose variable names
    service_mapping = {
        "HTTP_SERVER_PORT": get_port("http-server"),
        "POSTGRES_PORT": get_port("postgres"),
        "MONGO_PORT": get_port("mongo"),
    }
    
    for var_name, port in service_mapping.items():
        if port:
            compose_env_content += f"{var_name}={port}\n"
    
    with open('.env.compose', 'w') as f:
        f.write(compose_env_content)
    
    print("âœ… Generated .env.compose file for Docker Compose")
    return '.env.compose'

def export_shell_vars():
    """Export environment variables for current shell"""
    env_vars = export_env_vars()
    
    shell_script = "#!/bin/bash\n"
    shell_script += "# Export port assignments to environment\n"
    shell_script += "# Source this file: source ./port_exports.sh\n\n"
    
    for var_name, value in env_vars.items():
        shell_script += f"export {var_name}={value}\n"
    
    # Add additional environment variables
    shell_script += "\n# Additional environment variables\n"
    shell_script += "export POSTGRES_HOST=localhost\n"
    shell_script += "export POSTGRES_DB=testdb\n"
    shell_script += "export POSTGRES_USER=user\n"
    shell_script += "export POSTGRES_PASSWORD=password\n"
    shell_script += "export MONGO_HOST=localhost\n"
    shell_script += "export MONGO_DB=testdb\n"
    shell_script += "export SQLITE_PATH=/tmp/test.db\n"
    shell_script += "export SERVER_HOST=localhost\n"
    shell_script += "export SERVER_PROTOCOL=http\n"
    shell_script += "export WS_PROTOCOL=ws\n"
    
    shell_script += "\necho 'ðŸšª Port assignments exported to environment'\n"
    
    with open('port_exports.sh', 'w') as f:
        f.write(shell_script)
    
    # Make it executable
    os.chmod('port_exports.sh', 0o755)
    
    print("âœ… Generated port_exports.sh for shell environment")
    return 'port_exports.sh'

def reset_all_ports():
    """Reset all port assignments"""
    print("ðŸ”„ Resetting all port assignments...")
    port_manager.reset_assignments()
    print("âœ… All port assignments have been reset")

def main():
    """Main entry point"""
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "init":
            print("ðŸš€ Initializing port management system...")
            ports = initialize_ports()
            generate_env_file()
            update_compose_env_file()
            export_shell_vars()
            
            print("\nðŸŽ‰ Port management system initialized!")
            print("ðŸ“‹ Next steps:")
            print("   1. Source the environment: source ./port_exports.sh")
            print("   2. Run tests: python run_containerized_tests.py")
            print("   3. Check assignments: python setup_ports.py status")
            
        elif command == "status":
            port_manager.print_summary()
            
        elif command == "reset":
            reset_all_ports()
            
        elif command == "export":
            export_shell_vars()
            
        elif command == "env":
            generate_env_file()
            update_compose_env_file()
            
        elif command == "help":
            print("Usage: python setup_ports.py [command]")
            print("Commands:")
            print("  init     - Initialize port assignments and generate config files")
            print("  status   - Show current port assignments")
            print("  reset    - Reset all port assignments")
            print("  export   - Generate shell export script")
            print("  env      - Generate .env files")
            print("  help     - Show this help message")
            
        else:
            print(f"Unknown command: {command}")
            print("Use 'python setup_ports.py help' for available commands")
            sys.exit(1)
    else:
        # Default action
        print("ðŸšª Port Management System")
        print("========================")
        port_manager.print_summary()
        
        print("\nðŸ’¡ Use 'python setup_ports.py help' for available commands")

if __name__ == "__main__":
    main()
