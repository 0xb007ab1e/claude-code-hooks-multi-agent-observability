# Multi-Agent Observability Server Configuration
# Copy this file to .env and fill in the values

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

# Port for the HTTP server to listen on
# Default: 4000
PORT=4000

# Node environment (development, production, test)
# Default: development
NODE_ENV=development

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# Path to SQLite database file
# Default: events.db
DATABASE_PATH=events.db

# Optional: PostgreSQL connection URL for future database migration
# Format: postgresql://username:password@host:port/database
# Example: postgresql://user:pass@localhost:5432/observability
# POSTGRES_URL=

# Alternative: Separate database connection components
# DATABASE_URL format: postgresql://username:password@host:port/database
# DATABASE_URL=postgresql://user:password@localhost:5432/observability
# DB_PASSWORD=your-database-password-here
# DB_HOST=localhost
# DB_PORT=5432
# DB_NAME=observability
# DB_USER=your-database-user

# =============================================================================
# CORS CONFIGURATION
# =============================================================================

# Comma-separated list of allowed CORS origins
# Use "*" to allow all origins (not recommended for production)
# Examples: 
#   - Single origin: http://localhost:3000
#   - Multiple origins: http://localhost:3000,https://myapp.com
# Default: *
CORS_ORIGINS=*

# =============================================================================
# AUTHENTICATION & SECURITY
# =============================================================================

# API key for authenticated requests (optional)
# Generate a secure random string for production
# API_KEY=your-secret-api-key-here

# JWT secret for token signing (optional)
# Generate a secure random string for production
# JWT_SECRET=your-jwt-secret-here

# =============================================================================
# RATE LIMITING
# =============================================================================

# Time window for rate limiting in milliseconds
# Default: 900000 (15 minutes)
RATE_LIMIT_WINDOW_MS=900000

# Maximum number of requests per time window
# Default: 100
RATE_LIMIT_MAX_REQUESTS=100

# =============================================================================
# WEBSOCKET CONFIGURATION
# =============================================================================

# WebSocket heartbeat interval in milliseconds
# Default: 30000 (30 seconds)
WS_HEARTBEAT_INTERVAL=30000

# =============================================================================
# LOGGING
# =============================================================================

# Logging level (error, warn, info, debug)
# Default: info
LOG_LEVEL=info

# =============================================================================
# PRODUCTION SECURITY NOTES
# =============================================================================

# For production deployment:
# 1. Set NODE_ENV=production
# 2. Use a secure DATABASE_PATH with proper file permissions
# 3. Configure specific CORS_ORIGINS (avoid using "*")
# 4. Set strong API_KEY and JWT_SECRET values
# 5. Consider using a PostgreSQL database (set POSTGRES_URL)
# 6. Set appropriate rate limits for your use case
# 7. Use "warn" or "error" LOG_LEVEL for production

# =============================================================================
# THIRD-PARTY SERVICES (Future expansion)
# =============================================================================

# Add any third-party service configurations here as needed
# Examples:
# REDIS_URL=redis://localhost:6379
# MONGODB_URL=mongodb://localhost:27017/observability
# ELASTIC_SEARCH_URL=http://localhost:9200
